{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","components/NumberList.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","Component","Input","ClearButton","handleClear","NumberList","calcItems","calculationArray","slice","reverse","map","calculation","calculationWithPlus","replace","App","componentDidMount","getCalculations","_","fetch","then","response","json","jsonResponse","data","calcObject","calc","calcArray","console","log","catch","err","error","addCalculation","state","length","renderCalculation","id","key","clearCalculations","addToInput","evaluating","setState","input","calcRecord","currentNumber","addZeroToInput","addDecimal","indexOf","clearInput","handleEvaluate","setAnswer","evaluate","answer","operator","parseFloat","previousNumber","newCalculation","calcList","joined","concat","shift","add","subtract","multiply","divide","calculations","calculationList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.236f57d3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Button.css\";\n\nclass Button extends Component {\n  // returns true if val is a number, a period, or equals sign\n  isOperator = (val) => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\n\n  render() {\n    return (\n      <div\n        // if the button's val is a number, dont add a class, if it's an operator, add the class 'operator'\n        className={`button ${\n          this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\n          onClick={() => {\n              this.props.handleClick(this.props.children);\n        }}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./Input.css\";\n\nclass Input extends Component {\n\n  render() {\n    return (\n      <div className=\"input\">\n          {/* inherit values from app.js */}\n          {this.props.children}\n      </div>\n    );\n  }}\n\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport \"./ClearButton.css\";\n\nclass ClearButton extends Component {\n\n  render() {\n    return (\n      <div className=\"clear-btn\"\n      onClick={() => this.props.handleClear()}\n      \n      >\n          {/* inherit values from app.js */}\n          {this.props.children}\n      </div>\n    );\n  }}\n\n\nexport default ClearButton;\n","import React, { Component } from \"react\";\nimport \"./NumberList\";\n\nclass NumberList extends Component {\n\n  render() {\n    let calcArray = this.props.calculationArray;\n    // console.log(calcArray)\n    const calcItems = calcArray.slice(0).reverse().slice(0,10).map((calculation) => {\n      // console.log(calculation)\n    const calculationWithPlus = calculation.replace(\"   \", \" + \")\n    //   console.log(calculationWithPlus)\n      return <li>{calculationWithPlus}</li>\n    }\n    );\n\n    return <ul>{calcItems}</ul>;\n  }\n}\n\nexport default NumberList;\n\n\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport ClearButton from \"./components/ClearButton\";\nimport NumberList from \"./components/NumberList\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\",\n      calcRecord: \"\",\n      answer: \"\",\n      calculations: [],\n      calculation: {\n        id: 1,\n        calc: \"sample calculation\",\n      },\n      calculationList: \"calculationListhi\",\n      calculationArray: [''],\n      calcList: [],\n      evaluating: false,\n\n    };\n  }\n\n  componentDidMount = () => {\n    this.getCalculations();\n  };\n\n  getCalculations = (_) => {\n    fetch(\"http://localhost:4000/calculations\")\n      .then((response) => response.json())\n      .then(jsonResponse => {\n        return jsonResponse.data.map(calcObject => calcObject.calc)\n      })\n      .then((calcArray) => {\n        console.log(`got the calcs: ${calcArray}`)\n        // var joined = this.state.calculationArray.concat(calcArray);\n        // this.setState({ calculationArray: calcArray })\n      })\n      .catch((err) => console.error(err));\n  };\n\n  addCalculation = () => {\n    const { calculationArray } = this.state;\n    console.log(`adding ${calculationArray[calculationArray.length - 1]} to the database`)\n\n    fetch(\n      `http://localhost:4000/calculations/add?calc=${calculationArray[calculationArray.length - 1]}`\n    )\n      // .then(response => response.json())\n      .then(this.getCalculations)\n      .catch((err) => console.error(err));\n  };\n\n  //\n  renderCalculation = ({ id, calc }) => {\n    return <div key={id}>{calc}</div>;\n  };\n\n  clearCalculations = (_) => {\n    fetch(\n      `http://localhost:4000/clear/`\n    )\n    .catch((err) => console.error(err))\n  }\n\n  addToInput = (val) => {\n    if (this.state.evaluating === true) {\n      this.setState({\n        input: val,\n        calcRecord: val,\n        currentNumber: val,\n        evaluating: false,\n      });\n    } else if (this.state.input.slice(-1) === \" \" || !this.state.input) {\n      this.setState({\n        input: this.state.input + val,\n        calcRecord: this.state.calcRecord + val,\n        currentNumber: val,\n      });\n    } else {\n      this.setState({\n        input: this.state.input + val,\n        calcRecord: this.state.calcRecord + val,\n        currentNumber: this.state.currentNumber + val,\n      });\n    }\n  };\n\n  addZeroToInput = (val) => {\n    // if this.state.input is not empty then add zero\n    if (this.state.input !== \"\") {\n      this.setState({\n        input: this.state.input + val,\n        calcRecord: this.state.calcRecord + val,\n        currentNumber: this.state.currentNumber + val,\n      });\n    }\n  };\n\n  addDecimal = (val) => {\n    // if there is no decimal in input, then add the decimal\n    if (this.state.input.indexOf(\".\") === -1) {\n      this.setState({\n        input: this.state.input + val,\n        calcRecord: this.state.calcRecord + val,\n      });\n    }\n  };\n\n  clearInput = () => {\n    this.setState({\n      input: \"\",\n      calcRecord: \"\",\n    });\n  };\n\n  // handleChange = () => {\n  //   this.setState(this.setAnswer(this.evaluate()), this.addCalculation);\n  // }\n\n  handleEvaluate = () => {\n    // this.addCalculation()\n    if(this.state.evaluating === true) {\n      // this.addCalculation();\n      return;\n    } else {\n      // this.handleChange()\n    this.setAnswer(this.evaluate());\n    this.addCalculation();\n    this.setState({\n      input: this.evaluate(),\n      evaluating: true,\n    });\n  }\n  };\n\n  evaluate = () => {\n    let answer = 0;\n\n    if (this.state.operator === \"plus\") {\n      answer =\n        parseFloat(this.state.previousNumber) +\n        parseFloat(this.state.currentNumber);\n    } else if (this.state.operator === \"subtract\") {\n      answer =\n        parseFloat(this.state.previousNumber) -\n        parseFloat(this.state.currentNumber);\n    } else if (this.state.operator === \"multiply\") {\n      answer =\n        parseFloat(this.state.previousNumber) *\n        parseFloat(this.state.currentNumber);\n    } else if (this.state.operator === \"divide\") {\n      answer =\n        parseFloat(this.state.previousNumber) /\n        parseFloat(this.state.currentNumber);\n    }\n    return answer;\n  };\n\n  setAnswer = (answer) => {\n\n    let newCalculation = this.state.calcRecord + \" = \" + answer;\n    // this.addCalculation(newCalculation)\n    const { calcList } = this.state;\n    // this.setState({ calculationList: newCalculation });\n\n    var joined = this.state.calculationArray.concat(newCalculation);\n    this.setState({ calculationArray: joined });\n    if (calcList.length < 10) {\n      this.setState({\n        calcRecord: newCalculation,\n        calculationArray: joined,\n      },\n      () => {\n        this.addCalculation()\n    });\n    } else if (calcList.length >= 10) {\n      this.setState({ calcList: calcList.shift() });\n      this.setState({\n        calcRecord: newCalculation,\n        calculationArray: joined,\n      },\n      () => {\n        this.addCalculation()\n    });\n    }\n  };\n\n  add = () => {\n    this.setState({\n      previousNumber: this.state.input,\n      input: this.state.calcRecord + \" + \",\n      operator: \"plus\",\n      calcRecord: this.state.calcRecord + \" + \",\n    });\n  };\n\n  subtract = () => {\n    this.setState({\n      previousNumber: this.state.input,\n      input: this.state.calcRecord + \" - \",\n      operator: \"subtract\",\n      calcRecord: this.state.calcRecord + \" - \",\n    });\n  };\n\n  multiply = () => {\n    this.setState({\n      previousNumber: this.state.input,\n      input: this.state.calcRecord + \" * \",\n      operator: \"multiply\",\n      calcRecord: this.state.calcRecord + \" * \",\n    });\n  };\n\n  divide = () => {\n    this.setState({\n      previousNumber: this.state.input,\n      input: \"\",\n      operator: \"divide\",\n      calcRecord: this.state.calcRecord + \" / \",\n    });\n  };\n\n  render() {\n    // const { calculations } = this.state;\n    return (\n      <div className=\"App\">\n        {/* <div className=\"calcArea\">\n          {this.state.calculations.map(this.renderCalculation)}\n        </div> */}\n\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input>{this.state.input}</Input>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.divide}>/</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.multiply}>*</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.handleEvaluate}>=</Button>\n            <Button handleClick={this.subtract}>-</Button>\n          </div>\n          \n          <div className=\"row\">\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\n            {/* <ClearButton handleClear={this.clearCalculations}>Clear Calculations</ClearButton> */}\n          </div>\n        </div>\n        <div className=\"list-wrapper\">\n          <NumberList calculationArray={this.state.calculationArray} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// submit = (event) => {\n//   event.preventDefault();\n\n//   const payload = {\n//     calculation: this.state.calcRecord\n//   };\n\n//   axios({\n//     url: 'http://localhost:8080/api/save',\n//     method: 'POST',\n//     data: payload\n//   })\n//   .then(() => {\n//     console.log('Data has been sent to server')\n//   })\n//   .catch(() => {\n//     console.log('Internal server error')\n//   });\n\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}