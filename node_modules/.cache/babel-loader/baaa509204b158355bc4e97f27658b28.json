{"ast":null,"code":"var _jsxFileName = \"/Users/andrewsmith/Desktop/ReactCalc/reactcalc/src/components/Button.js\";\nimport React, { Component } from \"react\";\nimport \"./Button.css\";\n\nclass Button extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.isOperator = val => {\n      return !isNaN(val) || val === \".\" || val === \"=\";\n    };\n\n    this.clickButton = () => {\n      this.props.handleClick(this.props.children);\n      console.log(`hi`);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      // if the button's val is a number, dont add a class, if it's an operator, add the class 'operator'\n      className: `button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`,\n      onClick: this.clickButton(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default Button;","map":{"version":3,"sources":["/Users/andrewsmith/Desktop/ReactCalc/reactcalc/src/components/Button.js"],"names":["React","Component","Button","isOperator","val","isNaN","clickButton","props","handleClick","children","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAAA;AAAA;;AAAA,SAE7BE,UAF6B,GAEfC,GAAD,IAAS;AACpB,aAAO,CAACC,KAAK,CAACD,GAAD,CAAN,IAAeA,GAAG,KAAK,GAAvB,IAA8BA,GAAG,KAAK,GAA7C;AACD,KAJ4B;;AAAA,SAM/BE,WAN+B,GAMjB,MAAM;AAChB,WAAKC,KAAL,CAAWC,WAAX,CAAuB,KAAKD,KAAL,CAAWE,QAAlC;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAa,IAAb;AACH,KAV8B;AAAA;;AAY7BC,EAAAA,MAAM,GAAG;AACP,wBACE;AACE;AACA,MAAA,SAAS,EAAG,UACV,KAAKT,UAAL,CAAgB,KAAKI,KAAL,CAAWE,QAA3B,IAAuC,EAAvC,GAA4C,UAAW,EAH3D;AAII,MAAA,OAAO,EAAE,KAAKH,WAAL,EAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,KAAKC,KAAL,CAAWE,QAPd,CADF;AAWD;;AAxB4B;;AA2B/B,eAAeP,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Button.css\";\n\nclass Button extends Component {\n  // returns true if val is a number, a period, or equals sign\n  isOperator = (val) => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\nclickButton = () => {\n    this.props.handleClick(this.props.children);\n\n    console.log(`hi`)\n}\n\n  render() {\n    return (\n      <div\n        // if the button's val is a number, dont add a class, if it's an operator, add the class 'operator'\n        className={`button ${\n          this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\n          onClick={this.clickButton()\n        }\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}