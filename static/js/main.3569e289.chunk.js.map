{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","Component","Input","ClearButton","handleClear","NumberList","listItems","calcList","map","number","App","addToInput","setState","input","state","calcRecord","addZeroToInput","addDecimal","indexOf","clearInput","handleEvaluate","setAnswer","evaluate","currentNumber","answer","operator","parseFloat","previousNumber","result","length","unshift","pop","add","subtract","multiply","divide","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3569e289.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Button.css\";\n\nclass Button extends Component {\n  // returns true if val is a number, a period, or equals sign\n  isOperator = (val) => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\n\n  render() {\n    return (\n      <div\n        // if the button's val is a number, dont add a class, if it's an operator, add the class 'operator'\n        className={`button ${\n          this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\n          onClick={() => {\n              this.props.handleClick(this.props.children);\n        }}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./Input.css\";\n\nclass Input extends Component {\n\n  render() {\n    return (\n      <div className=\"input\">\n          {/* inherit values from app.js */}\n          {this.props.children}\n      </div>\n    );\n  }}\n\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport \"./ClearButton.css\";\n\nclass ClearButton extends Component {\n\n  render() {\n    return (\n      <div className=\"clear-btn\"\n      onClick={() => this.props.handleClear()}\n      \n      >\n          {/* inherit values from app.js */}\n          {this.props.children}\n      </div>\n    );\n  }}\n\n\nexport default ClearButton;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport ClearButton from \"./components/ClearButton\";\n\nfunction NumberList(props) {\n  const calculationList = props.calcList;\n  const listItems = calculationList.map((number) =>\n    <li>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\nconst calcList = [];\n\nclass App extends Component {\n  // container for holding the states\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\",\n      calcRecord: \"\",\n      answer: \"\",\n    };\n\n  }\n\n\n\n  addToInput = (val) => {\n    this.setState({ \n      input: this.state.input + val,\n      calcRecord: this.state.calcRecord + val\n     });\n  };\n\n  addZeroToInput = (val) => {\n    // if this.state.input is not empty then add zero\n    if (this.state.input !== \"\") {\n      this.setState({ \n        input: this.state.input + val,\n        calcRecord: this.state.calcRecord + val\n       });\n    }\n  };\n\n  addDecimal = (val) => {\n    // if there is no decimal in input, then add the decimal\n    if (this.state.input.indexOf(\".\") === -1) {\n      this.setState({ \n        input: this.state.input + val,\n        calcRecord: this.state.calcRecord + val\n       });\n    }\n  };\n\n  clearInput = () => {\n    this.setState({ \n      input: \"\",\n      calcRecord: \"\"\n    });\n  };\n\n\n\n\nhandleEvaluate = () => {\n  this.setAnswer(this.evaluate());\n  this.setState({\n    input: this.evaluate()\n  }) \n\n// calcList.unshift(this.evaluate())\n// console.log(calcList)\n\n  // calcArray.push(this.evaluate())\n  // console.log(calcArray)\n  \n}\n\n  evaluate = () => {\n    // if changed, this doesnt work\n    this.state.currentNumber = this.state.input;\n\n    let answer = 0;\n\n    if (this.state.operator === \"plus\") {\n      \n        answer = \n          parseFloat(this.state.previousNumber) +\n          parseFloat(this.state.currentNumber)\n      \n    } else if (this.state.operator === \"subtract\") {\n      answer = \n          parseFloat(this.state.previousNumber) -\n          parseFloat(this.state.currentNumber)\n      \n    } else if (this.state.operator === \"multiply\") {\n      answer = \n          parseFloat(this.state.previousNumber) *\n          parseFloat(this.state.currentNumber)\n      \n    } else if (this.state.operator === \"divide\") {\n      answer = \n          parseFloat(this.state.previousNumber) /\n          parseFloat(this.state.currentNumber)\n      \n    }\n\n\n\n    return answer\n  };\n\nsetAnswer = (answer) => {\n\n  // calcList.unshift(this.evaluate())\nlet result = this.state.calcRecord + \" = \" + answer\n\nif (calcList.length < 10){\n  this.setState({ \n    calcRecord: result,\n    calcList: calcList.unshift(result)\n  });\n} else if (calcList.length >= 10) {\n  this.setState({ calcList: calcList.pop()})\n  this.setState({ \n    calcRecord: result,\n    calcList: calcList.unshift(result)\n  });\n}\n}\n\nadd = () => {\n  this.setState({\n    previousNumber: this.state.input,\n    input: \"\",\n    operator: \"plus\",\n    calcRecord: this.state.calcRecord + \"+\"\n  });\n};\n\n  subtract = () => {\n    this.setState({ \n      previousNumber: this.state.input,\n      input: \"\",\n      operator: \"subtract\",\n      calcRecord: this.state.calcRecord + \" - \"\n    });\n  };\n\n  multiply = () => {\n    this.setState({ \n      previousNumber: this.state.input,\n      input: \"\",\n      operator: \"multiply\",\n      calcRecord: this.state.calcRecord + \" * \"\n    });\n  };\n\n  divide = () => {\n    this.setState({ \n      previousNumber: this.state.input,\n      input: \"\",\n      operator: \"divide\",\n      calcRecord: this.state.calcRecord + \" / \"\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input>{this.state.input}</Input>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.divide}>/</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.multiply}>*</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.handleEvaluate}>=</Button>\n            <Button handleClick={this.subtract}>-</Button>\n          </div>\n\n          <div className=\"row\">\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\n          </div>\n        </div>\n        <div className=\"list-wrapper\">\n\n        <NumberList calcList={calcList} />\n\n      {/* <CalculationList>{this.state.calcRecord}</CalculationList> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}